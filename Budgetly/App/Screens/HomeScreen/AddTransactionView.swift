import SwiftUI
import SwiftData

struct AddTransactionView: View {
    var account: Account? // –°–≤—è–∑–∞–Ω–Ω—ã–π —Å—á—ë—Ç
    var onTransactionAdded: ((TransactionType) -> Void)?

    @Environment(\.modelContext) private var modelContext
    @Query private var allCategories: [Category]
    @Environment(\.dismiss) var dismiss

    @State private var selectedType: CategoryType = .expenses
    @State private var amount: String = ""
    @FocusState private var isAmountFieldFocused: Bool
    @State private var selectedCategory: String = Category.uncategorizedName
    @State private var newCategory: String = ""
    @State private var isShowingAlert = false // –§–ª–∞–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
    @State private var hasEnsuredCategories = false

    private var categoriesForThisAccount: [Category] {
        guard let acct = account else { return [] }
        return allCategories.filter { $0.account.id == acct.id }
    }

    private var filteredCategories: [Category] {
        categoriesForThisAccount
            .filter { $0.type == selectedType }
            .sorted { lhs, rhs in
                if lhs.name == Category.uncategorizedName { return true }
                if rhs.name == Category.uncategorizedName { return false }
                return lhs.name.localizedCompare(rhs.name) == .orderedAscending
            }
    }
    
    struct FlowLayout: Layout {
        var spacing: CGFloat = 10

        func sizeThatFits(proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) -> CGSize {
            let sizes = subviews.map { $0.sizeThatFits(.unspecified) }
            var totalHeight: CGFloat = 0
            var totalWidth: CGFloat = 0
            var lineWidth: CGFloat = 0
            var lineHeight: CGFloat = 0

            for size in sizes {
                if lineWidth + size.width > (proposal.width ?? 0) && lineWidth > 0 {
                    totalWidth = max(totalWidth, lineWidth)
                    totalHeight += lineHeight + spacing
                    lineWidth = 0
                    lineHeight = 0
                }
                lineWidth += size.width + spacing
                lineHeight = max(lineHeight, size.height)
            }

            totalWidth = max(totalWidth, lineWidth)
            totalHeight += lineHeight

            return CGSize(width: max(totalWidth - spacing, 0), height: totalHeight)
        }

        func placeSubviews(in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) {
            let sizes = subviews.map { $0.sizeThatFits(.unspecified) }
            var lineWidth: CGFloat = 0
            var lineHeight: CGFloat = 0
            var y: CGFloat = bounds.minY
            var x: CGFloat = bounds.minX

            for (index, subview) in subviews.enumerated() {
                let size = sizes[index]

                if lineWidth + size.width > bounds.width && lineWidth > 0 {
                    x = bounds.minX
                    y += lineHeight + spacing
                    lineWidth = 0
                    lineHeight = 0
                }

                subview.place(
                    at: CGPoint(x: x, y: y + (size.height / 2)),
                    anchor: .leading,
                    proposal: ProposedViewSize(width: size.width, height: size.height)
                )

                x += size.width + spacing
                lineWidth += size.width + spacing
                lineHeight = max(lineHeight, size.height)
            }
        }
    }

    var body: some View {
        NavigationStack {
            VStack(spacing: 16) {
                // –í—ã–±–æ—Ä ¬´—Ä–∞—Å—Ö–æ–¥—ã / –¥–æ—Ö–æ–¥—ã¬ª
                Picker("–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏", selection: $selectedType) {
                    Text("–†–∞—Å—Ö–æ–¥—ã").tag(CategoryType.expenses)
                    Text("–î–æ—Ö–æ–¥—ã").tag(CategoryType.income)
                }
                .pickerStyle(.segmented)
                .tint(.appPurple)
                .frame(maxWidth: .infinity)
                .padding(.horizontal)
                .padding(.top, 4)
                        // –í–≤–æ–¥ —Å—É–º–º—ã
                        TextField("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É", text: $amount)
                            .keyboardType(.decimalPad)
                            .padding()
                            .background(Color.white) // –°–µ—Ä—ã–π —Ñ–æ–Ω —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                            .cornerRadius(10) // –ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã
                            .overlay(
                                RoundedRectangle(cornerRadius: 10)
                                    .stroke(isAmountFieldFocused ? Color.appPurple : .clear, lineWidth: 2)
                            )
                            .focused($isAmountFieldFocused)
                            .foregroundColor(.black) // –¶–≤–µ—Ç –≤–≤–æ–¥–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                            .padding(.horizontal)
                        //    .focused($isAmountFieldFocused)
//                HStack {
//                        // –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
//                        Text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
//                            .font(.headline)
//                   Spacer()
//                    Button {
//                        isShowingAlert = true
//                    } label: {
//                        Image(systemName: "plus.circle")
//                            .font(.title)
//                            .foregroundStyle(.black)
//                    }
//                }
                ScrollView {
                    FlowLayout(spacing: 10) {
                        ForEach(filteredCategories, id: \.name) { category in
                            Button {
                                selectedCategory = category.name
                            } label: {
                                CategoryBadge(category: category, isSelected: selectedCategory == category.name)
                            }
                            .contextMenu {
                                Button(role: .destructive) {
                                    removeCategory(category)
                                } label: {
                                    Label("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", systemImage: "trash")
                                }
                            }
                        }
                    }
                    .padding(.horizontal, 16)
                    .padding(.vertical, 10)
                }
                // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        Button("–î–æ–±–∞–≤–∏—Ç—å") {
                            saveTransaction()
                        }
                        .font(.headline)
                        .frame(maxWidth: .infinity, minHeight: 52)
                        .background(Color.appPurple)
                        .foregroundStyle(.white)
                        .cornerRadius(16)
                        .padding(.horizontal)
                        .padding(.bottom, 8)
            }
            .background(Color("BackgroundLightGray")) // —Ñ–æ–Ω
            .scrollContentBackground(.hidden) // –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω NavigationStack
            .toolbar {
                ToolbarItem(placement: .principal) {
                    Text("–ù–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
                        .font(.title3)
                        .fontWeight(.medium)
                        .foregroundStyle(.black)
                }
                // –∫–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª
                ToolbarItem(placement: .topBarLeading) {
                    Button("–û—Ç–º–µ–Ω–∏—Ç—å") { dismiss() }
                        .font(.title3)
                        .foregroundStyle(.appPurple)
                }
                // üöÄ –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                ToolbarItem(placement: .topBarTrailing) {
                    Button("–î–æ–±–∞–≤–∏—Ç—å") { isShowingAlert = true }
                        .font(.title3)
                        .foregroundStyle(.appPurple)
                }
            }
            // –ê–ª–µ—Ä—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            .alert("–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", isPresented: $isShowingAlert) {
                TextField("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", text: $newCategory)
                Button("–î–æ–±–∞–≤–∏—Ç—å", action: {
                    addNewCategory()
                })
                Button("–û—Ç–º–µ–Ω–∞", role: .cancel, action: {
                    newCategory = ""
                })
            }
        }
        .foregroundStyle(.black)
        .onAppear {
            DispatchQueue.main.async {
                isAmountFieldFocused = true

            }
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    private func addNewCategory() {
        guard let account = account, !newCategory.isEmpty else {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç account –∏–ª–∏ –ø—É—Å—Ç–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return
        }
        let category = Category(name: newCategory, type: selectedType, account: account)
        modelContext.insert(category) // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ SwiftData
        selectedCategory = newCategory
        newCategory = ""

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        do {
            try modelContext.save()
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: \(error)")
        }
    }
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    private func removeCategory(_ category: Category) {
        guard let account = account else { return }

        // 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö `transaction.category` —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–º–µ–Ω–µ–º —É–¥–∞–ª—è–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let transactionsToRemove = account.transactions.filter { $0.category == category.name }

        // 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ modelContext
        for transaction in transactionsToRemove {
            modelContext.delete(transaction)
        }

        // 3. –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        modelContext.delete(category)

        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        do {
            try modelContext.save()
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: \(error)")
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    private func saveTransaction() {
        guard
            let account = account,
            let amountValue = Double(amount),
            !selectedCategory.isEmpty
        else {
            return
        }
        // –î–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)
        let newTransactionDate = Date()
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø (—Ä–∞—Å—Ö–æ–¥/–¥–æ—Ö–æ–¥)
        let transactionType: TransactionType = (selectedType == .income) ? .income : .expenses
        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –Ω–µ –ø—ã—Ç–∞—è—Å—å –∏—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏ –Ω–µ —Å—É–º–º–∏—Ä—É—è
        let newTransaction = Transaction(
            category: selectedCategory,
            amount: amountValue,
            type: transactionType,
            account: account
        )
        newTransaction.date = newTransactionDate
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≤ –º–∞—Å—Å–∏–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å—á—ë—Ç–∞
        modelContext.insert(newTransaction)
        account.transactions.append(newTransaction)
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        do {
            try modelContext.save()
            onTransactionAdded?(transactionType)
            dismiss() // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: \(error)")
        }
    }
}

struct CategoryBadge: View {
    let category: Category
    let isSelected: Bool

    private static let badgeWidth: CGFloat = 84.3
    private static let badgeHeight: CGFloat = 68

    var body: some View {
        VStack(spacing: 4) {
            Text(category.name)
                .font(.caption)
                .multilineTextAlignment(.center)
                .lineLimit(2)
                .minimumScaleFactor(0.7)
        }
        .frame(width: Self.badgeWidth, height: Self.badgeHeight)
        .background(Color.white) // –§–æ–Ω –≤—Å–µ–≥–¥–∞ –±–µ–ª—ã–π
        .foregroundColor(.black) // –¢–µ–∫—Å—Ç —á—ë—Ä–Ω—ã–π
        .cornerRadius(16)
        .overlay(
            RoundedRectangle(cornerRadius: 16)
                .stroke(isSelected ? Color.appPurple : .clear, lineWidth: 2) // –û–±–≤–æ–¥–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        )
    }
}


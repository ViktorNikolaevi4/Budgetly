import SwiftUI
import SwiftData
import UserNotifications
import CloudKit
import Observation

@MainActor
private var isSeedingRunning = false

@MainActor
func createDefaultAccountIfNeeded(in context: ModelContext) async {
    guard !isSeedingRunning else { return }
    isSeedingRunning = true
    defer { isSeedingRunning = false }

    // 0) –£–∂–µ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ? –≤—ã—Ö–æ–¥–∏–º
    if ((try? context.fetchCount(FetchDescriptor<Account>())) ?? 0) > 0 { return }

    // 1) –î–∞–¥–∏–º –º–∏—Ä—Ä–æ—Ä–∏–Ω–≥—É —à–∞–Ω—Å —á—Ç–æ-—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
    try? await Task.sleep(nanoseconds: 700_000_000)
    if ((try? context.fetchCount(FetchDescriptor<Account>())) ?? 0) > 0 { return }

    let status = try? await CKContainer.default().accountStatus()

    // 2) –ï—Å–ª–∏ iCloud –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —Å–∏–¥–∏–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å–º–æ–≥–ª–∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–±–ª–∞–∫–æ –ø—É—Å—Ç–æ
    if status == .available {
        do {
            let db = CKContainer.default().privateCloudDatabase
            let q = CKQuery(recordType: "Account", predicate: NSPredicate(value: true))
            let (results, _) = try await db.records(matching: q)
            guard results.isEmpty else { return }   // –≤ –æ–±–ª–∞–∫–µ —É–∂–µ –µ—Å—Ç—å —Å—á–µ—Ç–∞ ‚Üí –Ω–µ —Å–∏–¥–∏–º
        } catch {
            // –ù–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–ª–∞–∫–æ (—Å–µ—Ç—å, —Å—Ö–µ–º–∞ –∏ —Ç.–ø.) ‚Üí —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã, –ù–ï —Å–∏–¥–∏–º
            return
        }
    }
    // 3) –ï—Å–ª–∏ iCloud –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —Å–∏–¥–∏–º –ª–æ–∫–∞–ª—å–Ω–æ (–æ—Ñ–ª–∞–π–Ω-first)

    // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º –µ—â—ë —Ä–∞–∑, –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ —É—Å–ø–µ–ª–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    if ((try? context.fetchCount(FetchDescriptor<Account>())) ?? 0) > 0 { return }

    // 4) –°–∏–¥ –ª–æ–∫–∞–ª—å–Ω–æ (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)
    let acc = Account(name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç", currency: "RUB", sortOrder: 0)
    context.insert(acc)
    Category.seedDefaults(for: acc, in: context)
    try? context.save()
    UserDefaults.standard.set(acc.id.uuidString, forKey: "selectedAccountID")
}




@main
struct BudgetlyApp: App {
    @State private var ckService = CloudKitService()
    private let modelContainer: ModelContainer = {
        let schema = Schema([
            Transaction.self,
            Category.self,
            Account.self,
            RegularPayment.self,
            Reminder.self,
            Asset.self,
            AssetType.self
        ])
        let config = ModelConfiguration(
            schema: schema,
            cloudKitDatabase: .automatic
        )
        return try! ModelContainer(for: schema, configurations: config)
    }()

    init() {
        UNUserNotificationCenter.current()
            .requestAuthorization(options: [.alert, .sound, .badge]) { granted, _ in
                print(granted ? "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã" : "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã")
            }
    }

    var body: some Scene {
        WindowGroup {
            RootView()
                .environment(\.cloudKitService, ckService)
                .modelContainer(modelContainer)
            // üëá –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
                .task { await createDefaultAccountIfNeeded(in: modelContainer.mainContext) }
        }
    }



//    private func trySeed() async {
//        await createDefaultAccountIfNeeded(in: modelContainer.mainContext)
//    }
}

